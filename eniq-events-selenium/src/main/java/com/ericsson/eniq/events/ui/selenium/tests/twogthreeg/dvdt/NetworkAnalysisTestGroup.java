/**
 * -----------------------------------------------------------------------
 *     Copyright (C) 2011 LM Ericsson Limited.  All rights reserved.
 * -----------------------------------------------------------------------
 */
package com.ericsson.eniq.events.ui.selenium.tests.twogthreeg.dvdt;

import com.ericsson.eniq.events.ui.selenium.common.ReservedDataHelperReplacement;
import com.ericsson.eniq.events.ui.selenium.events.tabs.NetworkTab;
import com.ericsson.eniq.events.ui.selenium.events.tabs.NetworkTab.NetworkType;
import com.ericsson.eniq.events.ui.selenium.events.tabs.NetworkTab.StartMenu;
import com.ericsson.eniq.events.ui.selenium.events.windows.CommonWindow;
import com.ericsson.eniq.events.ui.selenium.events.windows.SelectedButtonType;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

/**
 * @author eseuhon
 * @since 2011
 *
 * All testing behaviors are defined in the VS(Verification Spec) 
 * 1/10264-CNA 403 2210 Uen, Rev G 
 */
public class NetworkAnalysisTestGroup extends BaseDvdtTest {

    @Autowired
    private NetworkTab networkTab;

    @Autowired
    @Qualifier("networkEventAnalysis")
    private CommonWindow networkEventAnalysis;

    @Autowired
    @Qualifier("roamingByOperatorDataVol")
    private CommonWindow roamingByOperatorDataVol;

    @Autowired
    @Qualifier("roamingByCountryDataVol")
    private CommonWindow roamingByCountryDataVol;

    @Autowired
    @Qualifier("networkDataVolumeWindow")
    private CommonWindow networkDataVolumeWindow;

    @BeforeClass
    public static void openLog() {
        logger.log(Level.INFO, "Start of 2G/3G Data Bearer Throughput and Data Volume's Network Analysis test section");
        reservedDataHelperReplacement = new ReservedDataHelperReplacement(fileNameFor2G3GReservedData);
    }

    @AfterClass
    public static void closeLog() {
        logger.log(Level.INFO, "End of 2G/3G Data Bearer Throughput and Data Volume's Network Analysis test section");
        reservedDataHelperReplacement = null;
    }

    //Reserved values generated by data gen simulator
    final String apn = reservedDataHelperReplacement.getReservedData(APN);

    final String apnGroup = reservedDataHelperReplacement.getReservedData(APN_GROUP);

    final String sgsn = reservedDataHelperReplacement.getReservedData(SGSN);

    final String sgsnGroup = reservedDataHelperReplacement.getReservedData(SGSN_GROUP);

    final String imsi = reservedDataHelperReplacement.getReservedData(IMSI);

    @Test
    public void APNEventAnalysisWithDataIntegrity_7_3() throws Exception {
        networkTab.openEventAnalysisWindow(NetworkType.APN, false, apn);

        final List<String> hiddenHeaders = new ArrayList<String>(Arrays.asList(BEARER_COUNT, DOWNLINK_DATA_VOLUME_MB,
                DOWNLINK_THROUGHPUT_MB_SEC, DOWNLINK_AVERAGE_BEARER_VOLUME_KB, UPLINK_DATA_VOLUME_MB,
                UPLINK_THROUGHPUT_MB_SEC, UPLINK_AVERAGE_BEARER_VOLUME_KB));
        checkHeadersAreOptionalAndHiddenByDefault(networkEventAnalysis, hiddenHeaders);

        // Data integrity check now. 
        // Make sure we set any window's time periods to 12 hour to load reserved data 
        // for 2G/3G Data Volume Throughput which is generated by data gen simulator   
        networkEventAnalysis.setTimeRange(timeToLoadReservedData);

        final int rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(EVENT_TYPE, "DEACTIVATE");
        final Map<String, String> result = networkEventAnalysis.getAllDataAtTableRow(rowIndex);
        checkDataIntegrity(BEARER_COUNT, reservedDataHelperReplacement.getReservedData(BEARER_COUNT),
                result.get(BEARER_COUNT));
        checkDataIntegrity(DOWNLINK_DATA_VOLUME_MB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_DATA_VOLUME_MB),
                result.get(DOWNLINK_DATA_VOLUME_MB));
        checkDataIntegrity(DOWNLINK_THROUGHPUT_MB_SEC,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_THROUGHPUT_MB_SEC),
                result.get(DOWNLINK_THROUGHPUT_MB_SEC));
        checkDataIntegrity(DOWNLINK_AVERAGE_BEARER_VOLUME_KB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_AVERAGE_BEARER_VOLUME_KB),
                result.get(DOWNLINK_AVERAGE_BEARER_VOLUME_KB));
        checkDataIntegrity(UPLINK_DATA_VOLUME_MB, reservedDataHelperReplacement.getReservedData(UPLINK_DATA_VOLUME_MB),
                result.get(UPLINK_DATA_VOLUME_MB));
        checkDataIntegrity(UPLINK_THROUGHPUT_MB_SEC,
                reservedDataHelperReplacement.getReservedData(UPLINK_THROUGHPUT_MB_SEC),
                result.get(UPLINK_THROUGHPUT_MB_SEC));
        checkDataIntegrity(UPLINK_AVERAGE_BEARER_VOLUME_KB,
                reservedDataHelperReplacement.getReservedData(UPLINK_AVERAGE_BEARER_VOLUME_KB),
                result.get(UPLINK_AVERAGE_BEARER_VOLUME_KB));
    }

    @Test
    public void drillToFailedEventAnalysisFromAPNEventAnalysisWithDataIntegrity_7_4() throws Exception {
        networkTab.openEventAnalysisWindow(NetworkType.APN, false, reservedDataHelperReplacement.getReservedData(APN));

        //  make sure we have changed time interval to 12 hour to load reserved data properly.
        networkEventAnalysis.setTimeRange(timeToLoadReservedData);
        int rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(EVENT_TYPE, "DEACTIVATE");
        networkEventAnalysis.clickTableCell(rowIndex, "Failures");

        // data integrity check 
        final List<String> hiddenHeaders = new ArrayList<String>(Arrays.asList(PDP_DURATION, DOWNLINK_DATA_VOLOUME_KB,
                DOWNLINK_AVERAGE_USAGES, UPLINK_DATA_VOLUME_KB, UPLINK_AVERAGE_USAGE, QOS_DOWNGRADE, QOS_UPGRADE));
        checkHeadersAreOptionalAndHiddenByDefault(networkEventAnalysis, hiddenHeaders, DV_THROUGHOUTPUT);
        rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(IMSI, imsi);
        final Map<String, String> result = networkEventAnalysis.getAllDataAtTableRow(rowIndex);

        // data integrity check 
        checkDataIntegrity(MANUFACTURER, reservedDataHelperReplacement.getReservedData(MANUFACTURER),
                result.get("Terminal Make"));
        checkDataIntegrity(MODEL, reservedDataHelperReplacement.getReservedData(MODEL), result.get("Terminal Model"));
        checkDataIntegrity(TAC, reservedDataHelperReplacement.getReservedData(TAC), result.get(TAC));
        checkDataIntegrity(APN, reservedDataHelperReplacement.getReservedData(APN), result.get(APN));
        checkDataIntegrity(PDP_DURATION, reservedDataHelperReplacement.getReservedData(PDP_DURATION),
                result.get(PDP_DURATION));
        checkDataIntegrity(DOWNLINK_DATA_VOLOUME_KB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_DATA_VOLOUME_KB),
                result.get(DOWNLINK_DATA_VOLOUME_KB));
        checkDataIntegrity(DOWNLINK_AVERAGE_USAGES,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_AVERAGE_USAGES),
                result.get(DOWNLINK_AVERAGE_USAGES));
        checkDataIntegrity(UPLINK_DATA_VOLUME_KB, reservedDataHelperReplacement.getReservedData(UPLINK_DATA_VOLUME_KB),
                result.get(UPLINK_DATA_VOLUME_KB));
        checkDataIntegrity(UPLINK_AVERAGE_USAGE, reservedDataHelperReplacement.getReservedData(UPLINK_AVERAGE_USAGE),
                result.get(UPLINK_AVERAGE_USAGE));
    }

    @Test
    public void APNGroupEventAnalysisWithDataIntegrity_7_5() throws Exception {
        networkTab.openEventAnalysisWindow(NetworkType.APN_GROUP, true, apnGroup);

        final List<String> hiddenHeaders = new ArrayList<String>(Arrays.asList(BEARER_COUNT, DOWNLINK_DATA_VOLUME_MB,
                DOWNLINK_THROUGHPUT_MB_SEC, DOWNLINK_AVERAGE_BEARER_VOLUME_KB, UPLINK_DATA_VOLUME_MB,
                UPLINK_THROUGHPUT_MB_SEC, UPLINK_AVERAGE_BEARER_VOLUME_KB));
        checkHeadersAreOptionalAndHiddenByDefault(networkEventAnalysis, hiddenHeaders);

        // Data integrity check
        networkEventAnalysis.setTimeRange(timeToLoadReservedData);
        final int rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(EVENT_TYPE, "DEACTIVATE");
        final Map<String, String> result = networkEventAnalysis.getAllDataAtTableRow(rowIndex);

        checkDataIntegrity(BEARER_COUNT, reservedDataHelperReplacement.getReservedData(BEARER_COUNT),
                result.get(BEARER_COUNT));
        checkDataIntegrity(DOWNLINK_DATA_VOLUME_MB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_DATA_VOLUME_MB),
                result.get(DOWNLINK_DATA_VOLUME_MB));
        checkDataIntegrity(DOWNLINK_THROUGHPUT_MB_SEC,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_THROUGHPUT_MB_SEC),
                result.get(DOWNLINK_THROUGHPUT_MB_SEC));
        checkDataIntegrity(DOWNLINK_AVERAGE_BEARER_VOLUME_KB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_AVERAGE_BEARER_VOLUME_KB),
                result.get(DOWNLINK_AVERAGE_BEARER_VOLUME_KB));
        checkDataIntegrity(UPLINK_DATA_VOLUME_MB, reservedDataHelperReplacement.getReservedData(UPLINK_DATA_VOLUME_MB),
                result.get(UPLINK_DATA_VOLUME_MB));
        checkDataIntegrity(UPLINK_THROUGHPUT_MB_SEC,
                reservedDataHelperReplacement.getReservedData(UPLINK_THROUGHPUT_MB_SEC),
                result.get(UPLINK_THROUGHPUT_MB_SEC));
        checkDataIntegrity(UPLINK_AVERAGE_BEARER_VOLUME_KB,
                reservedDataHelperReplacement.getReservedData(UPLINK_AVERAGE_BEARER_VOLUME_KB),
                result.get(UPLINK_AVERAGE_BEARER_VOLUME_KB));

    }

    @Test
    public void drillToFailedEventAnalysisFromAPNGroupEventAnalysisWithDataIntegrity_7_6() throws Exception {
        networkTab.openEventAnalysisWindow(NetworkType.APN_GROUP, true,
                reservedDataHelperReplacement.getReservedData(APN_GROUP));

        networkEventAnalysis.setTimeRange(timeToLoadReservedData);
        int rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(EVENT_TYPE, "DEACTIVATE");
        networkEventAnalysis.clickTableCell(rowIndex, "Failures");

        final List<String> hiddenHeaders = new ArrayList<String>(Arrays.asList(PDP_DURATION, DOWNLINK_DATA_VOLOUME_KB,
                DOWNLINK_AVERAGE_USAGES, UPLINK_DATA_VOLUME_KB, UPLINK_AVERAGE_USAGE, QOS_DOWNGRADE, QOS_UPGRADE));
        checkHeadersAreOptionalAndHiddenByDefault(networkEventAnalysis, hiddenHeaders, DV_THROUGHOUTPUT);

        rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(IMSI, imsi);
        final Map<String, String> result = networkEventAnalysis.getAllDataAtTableRow(rowIndex);

        // data integrity check 
        checkDataIntegrity(MANUFACTURER, reservedDataHelperReplacement.getReservedData(MANUFACTURER),
                result.get("Terminal Make"));
        checkDataIntegrity(MODEL, reservedDataHelperReplacement.getReservedData(MODEL), result.get("Terminal Model"));
        checkDataIntegrity(TAC, reservedDataHelperReplacement.getReservedData(TAC), result.get(TAC));
        checkDataIntegrity(APN, reservedDataHelperReplacement.getReservedData(APN), result.get(APN));
        checkDataIntegrity(PDP_DURATION, reservedDataHelperReplacement.getReservedData(PDP_DURATION),
                result.get(PDP_DURATION));
        checkDataIntegrity(DOWNLINK_DATA_VOLOUME_KB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_DATA_VOLOUME_KB),
                result.get(DOWNLINK_DATA_VOLOUME_KB));
        checkDataIntegrity(DOWNLINK_AVERAGE_USAGES,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_AVERAGE_USAGES),
                result.get(DOWNLINK_AVERAGE_USAGES));
        checkDataIntegrity(UPLINK_DATA_VOLUME_KB, reservedDataHelperReplacement.getReservedData(UPLINK_DATA_VOLUME_KB),
                result.get(UPLINK_DATA_VOLUME_KB));
        checkDataIntegrity(UPLINK_AVERAGE_USAGE, reservedDataHelperReplacement.getReservedData(UPLINK_AVERAGE_USAGE),
                result.get(UPLINK_AVERAGE_USAGE));
    }

    @Test
    public void SGSNEventAnalysisWithDataIntegrity_7_7() throws Exception {
        networkTab.openEventAnalysisWindow(NetworkType.SGSN_MME, false, sgsn);

        final List<String> hiddenHeaders = new ArrayList<String>(Arrays.asList(BEARER_COUNT, DOWNLINK_DATA_VOLUME_MB,
                DOWNLINK_THROUGHPUT_MB_SEC, DOWNLINK_AVERAGE_BEARER_VOLUME_KB, UPLINK_DATA_VOLUME_MB,
                UPLINK_THROUGHPUT_MB_SEC, UPLINK_AVERAGE_BEARER_VOLUME_KB));
        checkHeadersAreOptionalAndHiddenByDefault(networkEventAnalysis, hiddenHeaders);

        // Data integrity check
        networkEventAnalysis.setTimeRange(timeToLoadReservedData);
        final int rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(EVENT_TYPE, "DEACTIVATE");
        final Map<String, String> result = networkEventAnalysis.getAllDataAtTableRow(rowIndex);
        checkDataIntegrity(BEARER_COUNT, reservedDataHelperReplacement.getReservedData(BEARER_COUNT),
                result.get(BEARER_COUNT));
        checkDataIntegrity(DOWNLINK_DATA_VOLUME_MB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_DATA_VOLUME_MB),
                result.get(DOWNLINK_DATA_VOLUME_MB));
        checkDataIntegrity(DOWNLINK_THROUGHPUT_MB_SEC,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_THROUGHPUT_MB_SEC),
                result.get(DOWNLINK_THROUGHPUT_MB_SEC));
        checkDataIntegrity(DOWNLINK_AVERAGE_BEARER_VOLUME_KB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_AVERAGE_BEARER_VOLUME_KB),
                result.get(DOWNLINK_AVERAGE_BEARER_VOLUME_KB));
        checkDataIntegrity(UPLINK_DATA_VOLUME_MB, reservedDataHelperReplacement.getReservedData(UPLINK_DATA_VOLUME_MB),
                result.get(UPLINK_DATA_VOLUME_MB));
        checkDataIntegrity(UPLINK_THROUGHPUT_MB_SEC,
                reservedDataHelperReplacement.getReservedData(UPLINK_THROUGHPUT_MB_SEC),
                result.get(UPLINK_THROUGHPUT_MB_SEC));
        checkDataIntegrity(UPLINK_AVERAGE_BEARER_VOLUME_KB,
                reservedDataHelperReplacement.getReservedData(UPLINK_AVERAGE_BEARER_VOLUME_KB),
                result.get(UPLINK_AVERAGE_BEARER_VOLUME_KB));

    }

    @Test
    public void DrillToFailedEventAnalysisFromSGSNEventAnalysisWithDataIntegrity_7_8() throws Exception {
        networkTab.openEventAnalysisWindow(NetworkType.SGSN_MME, false,
                reservedDataHelperReplacement.getReservedData(SGSN));

        networkEventAnalysis.setTimeRange(timeToLoadReservedData);
        int rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(EVENT_TYPE, "DEACTIVATE");
        networkEventAnalysis.clickTableCell(rowIndex, "Failures");

        final List<String> hiddenHeaders = new ArrayList<String>(Arrays.asList(PDP_DURATION, DOWNLINK_DATA_VOLOUME_KB,
                DOWNLINK_AVERAGE_USAGES, UPLINK_DATA_VOLUME_KB, UPLINK_AVERAGE_USAGE));
        checkHeadersAreOptionalAndHiddenByDefault(networkEventAnalysis, hiddenHeaders, DV_THROUGHOUTPUT);

        rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(IMSI, imsi);
        final Map<String, String> result = networkEventAnalysis.getAllDataAtTableRow(rowIndex);

        // data integrity check 
        checkDataIntegrity(PDP_DURATION, reservedDataHelperReplacement.getReservedData(PDP_DURATION),
                result.get(PDP_DURATION));
        checkDataIntegrity(SGSN, reservedDataHelperReplacement.getReservedData(SGSN), result.get(SGSN_MME));
        checkDataIntegrity(MANUFACTURER, reservedDataHelperReplacement.getReservedData(MANUFACTURER),
                result.get("Terminal Make"));
        checkDataIntegrity(MODEL, reservedDataHelperReplacement.getReservedData(MODEL), result.get("Terminal Model"));
        checkDataIntegrity(TAC, reservedDataHelperReplacement.getReservedData(TAC), result.get(TAC));
        checkDataIntegrity(PDP_DURATION, reservedDataHelperReplacement.getReservedData(PDP_DURATION),
                result.get(PDP_DURATION));
        checkDataIntegrity(DOWNLINK_DATA_VOLOUME_KB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_DATA_VOLOUME_KB),
                result.get(DOWNLINK_DATA_VOLOUME_KB));
        checkDataIntegrity(DOWNLINK_AVERAGE_USAGES,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_AVERAGE_USAGES),
                result.get(DOWNLINK_AVERAGE_USAGES));
        checkDataIntegrity(UPLINK_DATA_VOLUME_KB, reservedDataHelperReplacement.getReservedData(UPLINK_DATA_VOLUME_KB),
                result.get(UPLINK_DATA_VOLUME_KB));
        checkDataIntegrity(UPLINK_AVERAGE_USAGE, reservedDataHelperReplacement.getReservedData(UPLINK_AVERAGE_USAGE),
                result.get(UPLINK_AVERAGE_USAGE));

    }

    @Test
    public void SGSNGroupEventAnalysisWithDataIntegrity_7_9() throws Exception {
        networkTab.openEventAnalysisWindow(NetworkType.SGSN_MME_GROUP, false, sgsnGroup);

        final List<String> hiddenHeaders = new ArrayList<String>(Arrays.asList(BEARER_COUNT, DOWNLINK_DATA_VOLUME_MB,
                DOWNLINK_THROUGHPUT_MB_SEC, DOWNLINK_AVERAGE_BEARER_VOLUME_KB, UPLINK_DATA_VOLUME_MB,
                UPLINK_THROUGHPUT_MB_SEC, UPLINK_AVERAGE_BEARER_VOLUME_KB));
        checkHeadersAreOptionalAndHiddenByDefault(networkEventAnalysis, hiddenHeaders);

        networkEventAnalysis.setTimeRange(timeToLoadReservedData);
        final int rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(EVENT_TYPE, "DEACTIVATE");
        final Map<String, String> result = networkEventAnalysis.getAllDataAtTableRow(rowIndex);

        checkDataIntegrity(BEARER_COUNT, reservedDataHelperReplacement.getReservedData(BEARER_COUNT),
                result.get(BEARER_COUNT));
        checkDataIntegrity(DOWNLINK_DATA_VOLUME_MB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_DATA_VOLUME_MB),
                result.get(DOWNLINK_DATA_VOLUME_MB));
        checkDataIntegrity(DOWNLINK_THROUGHPUT_MB_SEC,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_THROUGHPUT_MB_SEC),
                result.get(DOWNLINK_THROUGHPUT_MB_SEC));
        checkDataIntegrity(DOWNLINK_AVERAGE_BEARER_VOLUME_KB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_AVERAGE_BEARER_VOLUME_KB),
                result.get(DOWNLINK_AVERAGE_BEARER_VOLUME_KB));
        checkDataIntegrity(UPLINK_DATA_VOLUME_MB, reservedDataHelperReplacement.getReservedData(UPLINK_DATA_VOLUME_MB),
                result.get(UPLINK_DATA_VOLUME_MB));
        checkDataIntegrity(UPLINK_THROUGHPUT_MB_SEC,
                reservedDataHelperReplacement.getReservedData(UPLINK_THROUGHPUT_MB_SEC),
                result.get(UPLINK_THROUGHPUT_MB_SEC));
        checkDataIntegrity(UPLINK_AVERAGE_BEARER_VOLUME_KB,
                reservedDataHelperReplacement.getReservedData(UPLINK_AVERAGE_BEARER_VOLUME_KB),
                result.get(UPLINK_AVERAGE_BEARER_VOLUME_KB));

    }

    @Test
    public void drillToFailedEventAnalysisFromSGSNGroupEventAnalysisWithDataIntegrity_7_10() throws Exception {
        networkTab.openEventAnalysisWindow(NetworkType.SGSN_MME_GROUP, false, sgsnGroup);

        // Data integrity check
        networkEventAnalysis.setTimeRange(timeToLoadReservedData);
        int rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(EVENT_TYPE, "DEACTIVATE");
        networkEventAnalysis.clickTableCell(rowIndex, "Failures");

        final List<String> hiddenHeaders = new ArrayList<String>(Arrays.asList(PDP_DURATION, DOWNLINK_DATA_VOLOUME_KB,
                DOWNLINK_AVERAGE_USAGES, UPLINK_DATA_VOLUME_KB, UPLINK_AVERAGE_USAGE));
        checkHeadersAreOptionalAndHiddenByDefault(networkEventAnalysis, hiddenHeaders, DV_THROUGHOUTPUT);

        rowIndex = networkEventAnalysis.findFirstTableRowWhereMatchingAnyValue(IMSI,
                reservedDataHelperReplacement.getReservedData(IMSI));
        final Map<String, String> result = networkEventAnalysis.getAllDataAtTableRow(rowIndex);

        // data integrity check 
        checkDataIntegrity(MANUFACTURER, reservedDataHelperReplacement.getReservedData(MANUFACTURER),
                result.get("Terminal Make"));
        checkDataIntegrity(MODEL, reservedDataHelperReplacement.getReservedData(MODEL), result.get("Terminal Model"));
        checkDataIntegrity(TAC, reservedDataHelperReplacement.getReservedData(TAC), result.get(TAC));
        checkDataIntegrity(PDP_DURATION, reservedDataHelperReplacement.getReservedData(PDP_DURATION),
                result.get(PDP_DURATION));
        checkDataIntegrity(DOWNLINK_DATA_VOLOUME_KB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_DATA_VOLOUME_KB),
                result.get(DOWNLINK_DATA_VOLOUME_KB));
        checkDataIntegrity(DOWNLINK_AVERAGE_USAGES,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_AVERAGE_USAGES),
                result.get(DOWNLINK_AVERAGE_USAGES));
        checkDataIntegrity(UPLINK_DATA_VOLUME_KB, reservedDataHelperReplacement.getReservedData(UPLINK_DATA_VOLUME_KB),
                result.get(UPLINK_DATA_VOLUME_KB));
        checkDataIntegrity(UPLINK_AVERAGE_USAGE, reservedDataHelperReplacement.getReservedData(UPLINK_AVERAGE_USAGE),
                result.get(UPLINK_AVERAGE_USAGE));
    }

    @Test
    public void verifyRoamingByOperatorDataVolumeWithDataIntegrity_7_12() throws Exception {
        networkTab.openSubOfSubStartMenu(NetworkTab.StartMenu.ROAMING_ANALYSIS,
                NetworkTab.SubStartMenu.ROAMING_BY_OPERATOR,
                NetworkTab.SubOfSubStartMenu.ROAMING_BY_OPERATOR_DATA_VOLUME);

        assertTrue("Can't load a Roaming by Operator (Data Volume) window",
                selenium.isTextPresent("Roaming by Operator (Data Volume)"));

        //data integrity check
        roamingByOperatorDataVol.setTimeRange(timeToLoadReservedData);
        roamingByOperatorDataVol.clickButton(SelectedButtonType.TOGGLE_BUTTON);
        waitForPageLoadingToComplete();
        //data integrity check
        final Map<String, String> result = roamingByOperatorDataVol.getAllDataAtTableRow(0);
        checkDataIntegrity(OPERATOR, reservedDataHelperReplacement.getReservedData(OPERATOR), result.get(OPERATOR));
        checkDataIntegrity(BEARER_COUNT, reservedDataHelperReplacement.getReservedData(BEARER_COUNT),
                result.get("Number of Bearers"));
        checkDataIntegrity(DOWNLINK_DATA_VOLUME_MB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_DATA_VOLUME_MB), result.get("Downlink (MB)"));
        checkDataIntegrity(UPLINK_DATA_VOLUME_MB, reservedDataHelperReplacement.getReservedData(UPLINK_DATA_VOLUME_MB),
                result.get("Uplink (MB)"));
    }

    @Test
    public void verifyRoamingByCountryDataVolumeWithDataIntegrity_7_13() throws Exception {
        networkTab
                .openSubOfSubStartMenu(NetworkTab.StartMenu.ROAMING_ANALYSIS,
                        NetworkTab.SubStartMenu.ROAMING_BY_COUNTRY,
                        NetworkTab.SubOfSubStartMenu.ROAMING_BY_COUNTRY_DATA_VOLUME);

        assertTrue("Can't load a Roaming by Country (Data Volume) window",
                selenium.isTextPresent("Roaming by Country (Data Volume)"));

        roamingByCountryDataVol.setTimeRange(timeToLoadReservedData);
        roamingByCountryDataVol.clickButton(SelectedButtonType.TOGGLE_BUTTON);
        waitForPageLoadingToComplete();
        //data integrity check
        final Map<String, String> result = roamingByCountryDataVol.getAllDataAtTableRow(0);
        checkDataIntegrity(COUNTRY, reservedDataHelperReplacement.getReservedData(COUNTRY), result.get(COUNTRY));
        checkDataIntegrity(BEARER_COUNT, reservedDataHelperReplacement.getReservedData(BEARER_COUNT),
                result.get("Number of Bearers"));
        checkDataIntegrity(DOWNLINK_DATA_VOLUME_MB,
                reservedDataHelperReplacement.getReservedData(DOWNLINK_DATA_VOLUME_MB), result.get("Downlink (MB)"));
        checkDataIntegrity(UPLINK_DATA_VOLUME_MB, reservedDataHelperReplacement.getReservedData(UPLINK_DATA_VOLUME_MB),
                result.get("Uplink (MB)"));
    }

    @Test
    public void dataVolumeByAPN_7_14() throws Exception {
        networkTab.openTab();
        networkTab.setSearchType(NetworkType.APN);
        networkTab.enterSearchValue(apn, networkTab.isGroup(NetworkType.APN));
        networkTab.openStartMenu(NetworkTab.StartMenu.DATA_VOLUME);
        assertTrue("Can't load a Data Voulme window by " + apn, selenium.isTextPresent("Data Volume"));
    }

    @Test
    public void dataVolumeBySGSN_7_15() throws Exception {
        networkTab.openTab();
        networkTab.setSearchType(NetworkType.SGSN_MME);
        networkTab.enterSearchValue(sgsn, networkTab.isGroup(NetworkType.SGSN_MME));
        networkTab.openStartMenu(NetworkTab.StartMenu.DATA_VOLUME);
        assertTrue("Can't load a Data Voulme window by " + sgsn, selenium.isTextPresent("Data Volume"));
    }

    @Test
    public void dataVolumeByAPNGroup_7_16() throws Exception {
        networkTab.openTab();
        networkTab.setSearchType(NetworkType.APN_GROUP);
        networkTab.enterSearchValue(apnGroup, networkTab.isGroup(NetworkType.APN_GROUP));
        networkTab.openStartMenu(NetworkTab.StartMenu.DATA_VOLUME);
        assertTrue("Can't load a Data Voulme window by " + apnGroup, selenium.isTextPresent("Data Volume"));
    }

    @Test
    public void dataVolumeBySGSNGroup_7_17() throws Exception {
        networkTab.openTab();
        networkTab.setSearchType(NetworkType.SGSN_MME_GROUP);
        networkTab.enterSearchValue(sgsnGroup, networkTab.isGroup(NetworkType.SGSN_MME_GROUP));
        networkTab.openStartMenu(NetworkTab.StartMenu.DATA_VOLUME);
        assertTrue("Can't load a Data Voulme window by " + sgsnGroup, selenium.isTextPresent("Data Volume"));
    }

    @Test
    public void networkDataVolume_7_18() throws Exception {
        networkTab.openTab();
        networkTab.openStartMenu(StartMenu.NETWORK_DATA_VOLUME);

        networkDataVolumeWindow.openChartView(Arrays.asList("Downlink (MB)", "Number of Bearers", "Uplink (MB)"));
        networkDataVolumeWindow.openGridView();
    }

    /////////////////////////////////////////////////////////////////////////////
    //   P R I V A T E   M E T H O D S
    ///////////////////////////////////////////////////////////////////////////////

}
